document O
: O
Revisiting O
Distributional Method
Correspondence Method
Indexing Method
: O
A O
Python Method
Reimplementation Method
and O
New O
Experiments O
This O
paper O
introduces O
PyDCI Method
, O
a O
new O
implementation O
of O
Distributional Method
Correspondence Method
Indexing Method
( O
DCI Method
) O
written O
in O
Python O
. O
DCI Method
is O
a O
transfer Method
learning Method
method Method
for O
cross Task
- Task
domain Task
and Task
cross Task
- Task
lingual Task
text Task
classification Task
for O
which O
we O
had O
provided O
an O
implementation O
( O
here O
called O
JaDCI Method
) O
built O
on O
top O
of O
JaTeCS Method
, O
a O
Java Method
framework Method
for O
text Task
classification Task
. O
PyDCI Method
is O
a O
stand O
- O
alone O
version O
of O
DCI Method
that O
exploits O
scikit Method
- Method
learn Method
and O
the O
SciPy Method
stack Method
. O
We O
here O
report O
on O
new O
experiments O
that O
we O
have O
carried O
out O
in O
order O
to O
test O
PyDCI Method
, O
and O
in O
which O
we O
use O
as O
baselines O
new O
high O
- O
performing O
methods O
that O
have O
appeared O
after O
DCI Method
was O
originally O
proposed O
. O
These O
experiments O
show O
that O
, O
thanks O
to O
a O
few O
subtle O
ways O
in O
which O
we O
have O
improved O
DCI Method
, O
PyDCI Method
outperforms O
both O
JaDCI Method
and O
the O
above O
- O
mentioned O
high O
- O
performing O
methods O
, O
and O
delivers O
the O
best O
known O
results O
on O
the O
two O
popular O
benchmarks O
on O
which O
we O
had O
tested O
DCI Method
, O
i.e. O
, O
MultiDomainSentiment Method
( O
a.k.a O
. O
MDS Method
– O
for O
cross Task
- Task
domain Task
adaptation Task
) O
and O
Webis O
- O
CLS O
- O
10 O
( O
for O
cross Task
- Task
lingual Task
adaptation Task
) O
. O
PyDCI Method
, O
together O
with O
the O
code O
allowing O
to O
replicate O
our O
experiments O
, O
is O
available O
at O
. O
Transfer O
Learning O
Domain O
Adaptation O
Text O
Classification O
Sentiment O
Classification O
Cross O
- O
Domain O
Classification O
Cross O
- O
Lingual O
Classification O
Python O
section O
: O
Introduction O
Distributional Method
Correspondence Method
Indexing Method
( O
DCI Method
) O
is O
a O
pivot Method
- Method
based Method
feature Method
- Method
transfer Method
domain Method
adaptation Method
method Method
for O
cross Task
- Task
domain Task
and Task
cross Task
- Task
lingual Task
text Task
classification Task
. O
DCI Method
was O
first O
described O
in O
, O
and O
later O
improved O
and O
extended O
in O
; O
it O
was O
formerly O
implemented O
in O
Java O
as O
part O
of O
the O
JaTeCS O
( O
Ja O
va O
Te O
xt O
C O
ategorization Method
S Method
ystem Method
) O
framework O
, O
and O
this O
implementation O
( O
henceforth O
called O
JaDCI Method
) O
was O
made O
publicly O
available O
. O
JaTeCS Method
is O
a O
complex O
package O
, O
since O
it O
makes O
available O
many O
functionalities O
for O
text Task
analytics Task
research Task
. O
A O
drawback O
of O
JaDCI Method
is O
thus O
that O
, O
for O
the O
researcher O
wishing O
to O
replicate O
the O
results O
of O
or O
simply O
wishing O
to O
use O
JaDCI Method
, O
a O
substantive O
effort O
in O
installing O
and O
properly O
configuring O
the O
entire O
JaTeCS Method
framework Method
is O
thus O
needed O
. O
In O
this O
paper O
we O
present O
PyDCI Method
, O
a O
new O
implementation O
of O
the O
DCI Method
method O
written O
in O
Python O
and O
built O
on O
top O
of O
the O
SciPy Method
stack Method
and O
scikit Method
- Method
learn Method
toolkit Method
. O
Python Method
has O
become O
the O
preferred O
programming O
language O
for O
computer Task
scientists Task
. O
In O
the O
fields O
of O
machine Task
learning Task
and O
data Task
mining Task
its O
use O
has O
also O
been O
promoted O
by O
the O
appearance O
of O
Python Method
- Method
based Method
environments Method
such O
as O
SciPy Method
and O
scikit Method
- Method
learn Method
, O
whose O
potential O
and O
ease O
of O
use O
have O
attracted O
the O
interest O
of O
practitioners O
. O
Our O
reimplementation O
is O
thus O
in O
line O
with O
these O
trends O
. O
With O
respect O
to O
JaDCI Method
, O
PyDCI Method
introduces O
a O
few O
modifications O
in O
the O
way O
DCI Method
is O
implemented O
that O
, O
although O
subtle O
, O
bring O
about O
a O
significant O
improvement O
in O
the O
effectiveness O
of O
the O
method O
. O
The O
rest O
of O
this O
paper O
is O
structured O
as O
follows O
. O
In O
Section O
[ O
reference O
] O
we O
describe O
the O
main O
modifications O
to O
DCI Method
that O
our O
new O
implementation O
introduces O
. O
In O
Section O
[ O
reference O
] O
we O
report O
on O
new O
experiments O
that O
we O
have O
run O
using O
PyDCI Method
, O
and O
show O
that O
, O
thanks O
to O
the O
modifications O
above O
, O
PyDCI Method
delivers O
new O
state O
- O
of O
- O
the O
- O
art O
results O
on O
two O
popular O
benchmark O
datasets O
, O
i.e. O
, O
MultiDomainSentiment Method
( O
hereafter O
MDS Method
– O
for O
cross Task
- Task
domain Task
adaptation Task
) O
and O
Webis Method
- Method
CLS Method
- Method
10 Method
( O
for O
cross Task
- Task
lingual Task
adaptation Task
) O
. O
These O
results O
represent O
a O
clear O
improvement O
over O
the O
ones O
originally O
obtained O
with O
JaDCI Method
and O
presented O
in O
, O
and O
also O
over O
the O
ones O
obtained O
by O
recent O
high O
- O
performing O
methods O
that O
have O
appeared O
, O
or O
that O
we O
have O
become O
aware O
of O
, O
after O
DCI Method
was O
originally O
proposed O
. O
Section O
[ O
reference O
] O
concludes O
, O
hinting O
at O
future O
developments O
. O
We O
make O
PyDCI Method
publicly O
available O
via O
GitHub O
. O
section O
: O
Implementation O
Changes O
For O
reasons O
of O
brevity O
we O
do O
not O
re O
- O
explain O
DCI Method
from O
scratch O
; O
we O
refer O
the O
interested O
reader O
to O
for O
a O
concise O
description O
, O
or O
to O
for O
the O
full O
- O
blown O
presentation O
. O
The O
main O
modifications O
that O
PyDCI Method
introduces O
with O
respect O
to O
JaDCI Method
are O
the O
following O
: O
Document Task
Standardization Task
: O
In O
DCI Method
, O
feature O
vectors O
and O
document O
vectors O
( O
i.e. O
, O
the O
vectors O
that O
represent O
the O
features O
and O
the O
vectors O
that O
represent O
the O
documents O
, O
respectively O
) O
are O
post O
- O
processed O
via O
L2 Method
- Method
normalization Method
. O
In O
we O
had O
witnessed O
improvements O
when O
applying O
standardization Method
to O
the O
feature O
vectors O
( O
i.e. O
, O
translating O
and O
scaling O
each O
dimension O
so O
that O
it O
is O
approximatelly O
normally O
distributed O
in O
– O
see O
) O
. O
In O
PyDCI Method
we O
give O
the O
user O
the O
option O
to O
apply O
standardization O
also O
to O
each O
dimension O
of O
the O
document O
vectors O
before O
training O
the O
classifier Method
. O
All O
experiments O
we O
report O
in O
this O
paper O
are O
run O
with O
this O
option O
activated O
. O
Classifier Task
Optimization Task
: O
In O
PyDCI Method
we O
use O
scikit Method
- Method
learn Method
’s Method
implementation Method
of O
linear Method
SVMs Method
( O
LinearSVC Method
, O
which O
is O
in O
turn O
based O
on O
the O
liblinear Method
package Method
) O
, O
instead O
of O
using O
Joachims Method
’ Method
SVM Method
package Method
as O
we O
had O
done O
in O
JaDCI Method
. O
This O
allows O
us O
to O
leverage O
scikit Method
- Method
learn Method
’s Method
GridSearchCV Method
utility Method
in O
order O
to O
optimize O
SVM Method
’s O
parameter O
( O
which O
determines O
the O
trade O
- O
off O
between O
training Metric
error Metric
and O
the O
margin O
) O
via O
grid Method
search Method
optimization Method
, O
which O
allows O
us O
to O
effortlessly O
tune O
the O
classifier Method
. O
In O
the O
new O
experiments O
using O
PyDCI O
we O
let O
parameter O
range O
in O
, O
while O
in O
the O
JaDCI O
experiments O
we O
had O
simply O
relied O
on O
the O
default O
value O
that O
SVM O
attributes O
to O
. O
Increase O
in O
the O
Number O
of O
Pivots O
: O
We O
increase O
the O
number O
of O
pivots O
from O
100 O
( O
the O
value O
we O
had O
used O
in O
) O
to O
1 O
, O
000 O
in O
the O
cross O
- O
domain O
experiments O
and O
to O
450 O
in O
the O
cross Task
- Task
lingual Task
experiments Task
. O
This O
brings O
about O
a O
significant O
improvement O
in O
performance O
, O
that O
does O
not O
come O
at O
a O
significant O
cost O
in O
execution Metric
time Metric
( O
as O
instead O
had O
happened O
with O
the O
previous O
implementation O
) O
. O
We O
limit O
the O
number O
of O
pivots O
to O
450 O
in O
the O
cross Task
- Task
lingual Task
case Task
( O
instead O
of O
1 O
, O
000 O
) O
since O
in O
this O
case O
each O
pivot O
requires O
a O
translation O
to O
the O
target O
language O
which O
is O
assumed O
to O
have O
a O
cost O
; O
we O
thus O
set O
the O
number O
of O
pivots O
to O
450 O
as O
was O
done O
in O
previous O
research O
( O
e.g. O
, O
in O
) O
. O
We O
discuss O
below O
in O
more O
detail O
the O
impact O
on O
performance O
that O
the O
variation O
in O
the O
number O
of O
pivots O
has O
. O
We O
should O
also O
mention O
that O
PyDCI Method
relies O
on O
scikit Method
- Method
learn Method
( O
while O
JaDCI Method
relied O
on O
JaTeCS Method
) O
for O
many O
preprocessing Task
- Task
related Task
aspects Task
( O
e.g. O
, O
term Task
weighting Task
) O
, O
which O
also O
may O
cause O
some O
( O
hard O
to O
track O
) O
differences O
in O
performance O
with O
respect O
to O
JaDCI Method
. O
section O
: O
Experiments O
subsection O
: O
Effectiveness O
on O
Cross Task
- Task
Domain Task
Classification Task
and O
Cross Task
- Task
Lingual Task
Classification Task
In O
this O
section O
we O
report O
the O
results O
we O
have O
obtained O
in O
rerunning O
with O
PyDCI Method
the O
same O
experiments O
we O
had O
run O
with O
JaDCI Method
, O
and O
whose O
results O
had O
been O
reported O
in O
. O
The O
datasets O
we O
use O
are O
arguably O
the O
most O
popular O
benchmarks O
in O
the O
domain O
adaptation O
literature O
, O
i.e. O
, O
MDS Method
for O
cross Task
- Task
domain Task
adaptation Task
and O
Webis Task
- Task
CLS Task
- Task
10 Task
for O
cross Task
- Task
lingual Task
adaptation Task
. O
A O
complete O
description O
of O
the O
datasets O
and O
the O
standard O
experimental O
protocol O
followed O
in O
each O
case O
can O
be O
found O
either O
in O
the O
original O
publications O
describing O
the O
datasets O
or O
in O
. O
Tables O
[ O
reference O
] O
and O
[ O
reference O
] O
show O
the O
values O
of O
classification Metric
accuracy Metric
( O
i.e. O
, O
the O
fraction O
of O
correctly O
classified O
documents O
) O
we O
obtain O
for O
cross Task
- Task
domain Task
and Task
cross Task
- Task
lingual Task
classification Task
experiments O
, O
respectively O
. O
We O
focus O
on O
Linear O
and O
Cosine Method
( O
columns O
9 O
- O
10 O
) O
, O
two O
parameter O
- O
free O
probabilistic O
and O
kernel O
- O
based O
distributional Method
correspondence Method
functions Method
( O
DCFs Method
) O
investigated O
in O
. O
For O
each O
such O
DCF O
we O
show O
a O
direct O
comparison O
against O
the O
values O
we O
had O
obtained O
with O
JaDCI Method
( O
Columns O
7 O
- O
8 O
) O
. O
We O
also O
report O
two O
baselines O
: O
Lower O
( O
Column O
3 O
) O
, O
a O
classifier Method
that O
directly O
trains O
on O
the O
‘ O
‘ O
source O
’ O
’ O
training O
examples O
and O
tests O
on O
the O
‘ O
‘ O
target O
’ O
’ O
unlabeled O
examples O
without O
performing O
any O
sort O
of O
adaptation Task
at O
all O
. O
Such O
a O
classifier Method
should O
thus O
act O
as O
a O
lower O
bound O
for O
any O
reasonable O
adaptation Task
endeavour Task
. O
Upper O
( O
Column O
4 O
) O
, O
a O
classifier Method
that O
trains O
on O
the O
‘ O
‘ O
target O
’ O
’ O
training O
examples O
and O
tests O
on O
the O
‘ O
‘ O
target O
’ O
’ O
unlabeled O
examples O
without O
performing O
any O
sort O
of O
adaptation Task
at O
all O
. O
Such O
a O
classifier Method
should O
thus O
act O
as O
an O
upper O
bound O
for O
any O
reasonable O
adaptation Task
endeavour Task
. O
The O
baselines O
use O
exactly O
the O
same O
learner Method
we O
use O
for O
PyDCI Method
( O
LinearSVC Method
with O
the O
parameter O
optimized O
via O
grid Method
search Method
) O
. O
For O
each O
( O
problem O
, O
dataset O
) O
pair O
we O
also O
report O
the O
accuracy Metric
obtained O
by O
what O
, O
to O
the O
best O
of O
our O
knowledge O
, O
is O
today O
the O
best O
- O
performing O
known O
method O
on O
this O
( O
problem O
, O
dataset O
) O
pair O
( O
Column O
5 O
– O
labelled O
as O
‘ O
‘ O
SOTA O
’ O
’ O
, O
which O
stands O
for O
‘ O
‘ O
S O
tate O
O O
f O
T O
he O
A O
rt O
’ O
’ O
– O
reports O
the O
name O
of O
the O
method O
and O
Column O
6 O
reports O
the O
accuracy Metric
score Metric
, O
taken O
from O
the O
original O
paper O
) O
. O
Boldface O
indicates O
the O
best O
score O
for O
each O
( O
problem O
, O
dataset O
) O
pair O
; O
shadowed O
cells O
indicate O
the O
PyDCI O
scores O
that O
outperform O
the O
best O
- O
known O
results O
. O
Note O
that O
, O
aside O
from O
SDA Method
, O
all O
the O
baselines O
in O
the O
‘ O
‘ O
SOTA O
’ O
’ O
column O
had O
not O
been O
used O
as O
baselines O
in O
our O
original O
work O
on O
DCI Method
; O
the O
reason O
is O
that O
these O
methods O
were O
published O
after O
DCI Method
appeared O
in O
print O
, O
or O
that O
we O
were O
unaware O
of O
them O
. O
PyDCI Method
outperforms O
JaDCI Method
in O
most O
cases O
, O
and O
outperforms O
also O
the O
best O
- O
performing O
method O
in O
the O
literature O
, O
which O
is O
not O
always O
the O
same O
for O
each O
( O
problem O
, O
dataset O
) O
pair O
, O
with O
very O
few O
exceptions O
. O
PyDCI Method
obtains O
7 O
out O
of O
13 O
best O
results O
on O
MDS Task
( O
including O
best O
averaged Metric
accuracy Metric
) O
when O
equipped O
with O
the O
Cosine Method
DCF O
, O
and O
5 O
out O
of O
10 O
best O
results O
in O
Webis Task
- Task
CLS Task
- Task
10 Task
when O
using O
the O
Linear Method
DCF Method
( O
including O
best O
averaged Metric
accuracy Metric
) O
. O
In O
agreement O
with O
with O
, O
Cosine Method
proved O
the O
best O
performing O
DCF Method
, O
yielding O
the O
best O
results O
overall O
and O
surpassing O
the O
best O
accuracy Metric
obtained O
by O
any O
other O
method O
in O
17 O
cases O
out O
of O
23 O
( O
across O
the O
two O
datasets O
, O
and O
also O
including O
the O
average Metric
results O
) O
. O
With O
respect O
to O
the O
previously O
best O
- O
performing O
system O
, O
PyDCI Method
( O
Cosine Method
) O
brings O
about O
a O
reduction O
in O
error Metric
of O
+ O
10.2 O
% O
on O
MDS Method
and O
+ O
9.6 O
% O
on O
Webis Task
- Task
CLS Task
- Task
10 Task
. O
On O
the O
very O
same O
( O
problem O
, O
dataset O
) O
pairs O
we O
have O
also O
run O
experiments O
in O
order O
to O
evaluate O
the O
impact O
of O
modifications O
[ O
reference O
] O
( O
Document Task
Standardization Task
) O
and O
[ O
reference O
] O
( O
Classifier Task
Optimization Task
) O
mentioned O
in O
Section O
[ O
reference O
] O
. O
Concerning O
document Task
standardization Task
, O
we O
have O
rerun O
all O
the O
PyDCI Method
experiments O
described O
in O
Tables O
[ O
reference O
] O
and O
[ O
reference O
] O
without O
applying O
document Method
standardization Method
. O
The O
results O
are O
reported O
in O
the O
first O
two O
rows O
of O
Table O
[ O
reference O
] O
, O
and O
indicate O
, O
on O
average Metric
, O
a O
relative O
improvement O
in O
accuracy Metric
of O
+ O
0.2 O
% O
on O
MDS Method
and O
+ O
8.6 O
% O
on O
Webis Task
- Task
CLS Task
- Task
10 Task
; O
document Task
standardization Task
thus O
appears O
to O
be O
clearly O
beneficial O
. O
Concerning O
classifier Method
optimization Method
, O
we O
have O
rerun O
all O
the O
PyDCI Method
experiments O
described O
in O
Tables O
[ O
reference O
] O
and O
[ O
reference O
] O
without O
applying O
classifier Method
optimization Method
. O
The O
results O
are O
reported O
in O
the O
last O
two O
rows O
of O
Table O
[ O
reference O
] O
, O
and O
indicate O
, O
on O
average Metric
, O
a O
relative O
improvement O
in O
accuracy Metric
of O
+ O
9.7 O
% O
on O
MDS Method
and O
+ O
11.8 O
% O
on O
Webis Method
- Method
CLS Method
- Method
10 Method
; O
also O
classifier Method
optimization Method
is O
thus O
( O
unsurprisingly O
) O
clearly O
beneficial O
. O
subsection O
: O
Effectiveness O
on O
Cross Task
- Task
Domain Task
Cross Task
- Task
Lingual Task
Classification Task
Table O
[ O
reference O
] O
reports O
classification Metric
accuracy Metric
values Metric
obtained O
in O
the O
domain Task
adaptation Task
setting Task
proposed O
in O
, O
in O
which O
both O
domain O
and O
language O
differ O
between O
the O
source O
and O
target O
( O
i.e. O
, O
when O
the O
classification Task
task Task
is O
simultaneously O
cross O
- O
domain O
and O
cross O
- O
lingual O
) O
. O
In O
Table O
[ O
reference O
] O
we O
include O
the O
results O
we O
had O
obtained O
in O
for O
the O
Cross Method
- Method
Lingual Method
Structural Method
Correspondence Method
Learning Method
( Method
SCL Method
) Method
method Method
( O
which O
we O
use O
here O
as O
a O
baseline O
) O
, O
using O
its O
authors O
’ O
code O
( O
see O
) O
. O
The O
reason O
why O
we O
use O
SCL Method
as O
a O
baseline O
is O
that O
, O
although O
newer O
approaches O
have O
been O
tested O
in O
this O
setting O
, O
none O
of O
them O
, O
to O
the O
best O
of O
our O
knowledge O
, O
has O
outperformed O
SCL Method
so O
far O
. O
The O
results O
in O
Table O
[ O
reference O
] O
confirm O
the O
superiority O
of O
PyDCI Method
over O
JaDCI Method
. O
In O
this O
case O
, O
though O
, O
the O
differences O
in O
performance O
between O
the O
‘ O
‘ O
Cosine Method
’ O
’ O
counterparts O
is O
less O
pronounced O
. O
Between O
the O
PyDCI Method
variants Method
, O
Linear Method
performs O
slightly O
better O
than O
Cosine Method
. O
subsection O
: O
Statistical Metric
Significance Metric
We O
have O
subjected O
our O
experiments O
to O
thorough O
statistical Task
significance Task
testing Task
, O
by O
running O
a O
two O
- O
tailed O
t O
- O
test O
on O
paired O
examples O
across O
all O
runs O
( O
cross O
- O
domain O
and O
/ O
or O
cross O
- O
lingual O
) O
. O
The O
test O
reveals O
that O
the O
PyDCI O
versions O
of O
Linear O
and O
Cosine Method
outperform O
, O
in O
a O
statistically O
significant O
sense O
, O
the O
corresponding O
JaDCI Method
versions Method
( O
at O
a O
confidence O
level O
of O
) O
. O
subsection O
: O
Efficiency O
One O
important O
aspect O
of O
DCI Method
in O
general O
, O
and O
of O
PyDCI Method
in O
particular O
, O
is O
its O
efficiency O
. O
Figure O
[ O
reference O
] O
reports O
the O
computation Metric
times Metric
we O
have O
recorded O
in O
order O
to O
measure O
the O
efficiency O
of O
PyDCI Method
. O
While O
the O
best O
- O
performing O
methods O
from O
the O
literature O
rely O
on O
computationally O
expensive O
optimizations O
( O
most O
of O
them O
are O
deep Method
- Method
learning Method
- O
based O
) O
, O
none O
of O
the O
experiments O
we O
have O
presented O
so O
far O
required O
more O
than O
35 O
seconds O
to O
run O
. O
subsection O
: O
Effectiveness Metric
vs. O
Efficiency O
Trade O
- O
off O
In O
this O
section O
we O
analyse O
the O
trade O
- O
off O
between O
effectiveness Metric
( O
in O
terms O
of O
classification Metric
accuracy Metric
) O
and O
time Metric
efficiency Metric
( O
in O
terms O
of O
seconds O
) O
. O
In O
this O
experiment O
, O
we O
vary O
the O
number O
of O
pivots O
in O
the O
range O
. O
For O
the O
Webis Task
- Task
CLS Task
- Task
10 Task
we O
bound O
this O
range O
to O
pivots O
since O
, O
for O
some O
tasks O
it O
was O
impossible O
to O
extract O
more O
than O
pivots O
. O
Figure O
[ O
reference O
] O
shows O
the O
average Metric
accuracy O
( O
left O
) O
and O
computation Metric
times Metric
for O
MDS Method
and O
Webis Method
- Method
CLS Method
- Method
10 Method
. O
As O
increases O
, O
PyDCI Method
surpasses O
the O
best O
average Metric
accuracy Metric
reported O
for O
any O
other O
method O
in O
both O
datasets O
. O
In O
particular O
, O
and O
in O
accordance O
with O
, O
PyDCI Method
equipped O
with O
the O
Cosine Method
DCF O
does O
so O
with O
only O
100 O
pivots O
. O
In O
this O
case O
, O
and O
in O
contrast O
with O
JaDCI Method
, O
classification Metric
accuracy Metric
increases O
noticeably O
when O
more O
pivots O
are O
taken O
into O
account O
; O
this O
might O
be O
a O
side O
effect O
of O
the O
modifications O
discussed O
in O
Section O
[ O
reference O
] O
. O
In O
any O
case O
, O
the O
method O
seems O
to O
reach O
a O
plateau O
for O
higher O
values O
of O
, O
allowing O
the O
Cosine Method
variant O
to O
reach O
new O
peaks O
of O
classification Metric
accuracy Metric
of O
0.839 O
( O
when O
) O
in O
MDS Method
, O
and O
0.840 O
( O
when O
) O
in O
Webis Method
- Method
CLS Method
- Method
10 Method
. O
Regarding O
the O
efficiency O
of O
the O
method O
, O
PyDCI Method
exhibits O
a O
quasi O
- O
linear O
trend O
in O
time Metric
complexity Metric
, O
e.g. O
, O
when O
the O
number O
of O
pivots O
is O
doubled O
, O
the O
execution Metric
time Metric
is O
roughly O
doubled O
too O
. O
section O
: O
Conclusions O
We O
have O
presented O
PyDCI Method
, O
a O
( O
Python O
- O
based O
) O
revision O
of O
our O
previous O
( O
Java Method
- Method
based Method
) Method
implementation Method
of O
DCI Method
. O
This O
new O
implementation O
incorporates O
changes O
that O
, O
although O
subtle O
, O
nonetheless O
allow O
the O
method O
to O
deliver O
improved O
results O
that O
outperform O
the O
currently O
known O
best O
- O
performing O
methods O
. O
The O
efficiency O
tests O
we O
have O
carried O
out O
speak O
clearly O
about O
the O
efficiency O
of O
PyDCI Method
, O
which O
requires O
roughly O
half O
a O
minute O
to O
undertake O
any O
of O
the O
domain Task
adaptation Task
tasks Task
in O
our O
experiments O
. O
In O
a O
preliminary O
study O
DCI Method
was O
also O
tested O
in O
transductive Task
scenarios Task
. O
PyDCI Method
does O
not O
support O
transductive Method
classification Method
; O
this O
is O
something O
we O
plan O
to O
address O
in O
the O
near O
future O
. O
bibliography O
: O
References O
